:mod:`cdm.mapper.mapper`
========================

.. py:module:: cdm.mapper.mapper

.. autoapi-nested-parse::

   Created on Thu Apr 11 13:45:38 2019

   Maps data contained in a pandas DataFrame (or pd.io.parsers.TextFileReader) to
   the C3S Climate Data Store Common Data Model (CDM) header and observational
   tables using the mapping information available in the tool's mapping library
   for the input data model.

   @author: iregon



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   cdm.mapper.mapper._map
   cdm.mapper.mapper.map_model



Attributes
~~~~~~~~~~

.. autoapisummary::

   cdm.mapper.mapper.module_path


.. data:: module_path
   

   

.. function:: _map(imodel, data, data_atts, cdm_subset=None, log_level='INFO')

   Maps a pandas DataFrame (or pd.io.parsers.TextFileReader) to the C3S Climate Data Store Common Data Model (CDM)
   header and observational tables using mapping information from the input data model (imodel).

   :param imodel:
                  1. A generic mapping from a defined data model, like IMMA1's core and attachments
                     e.g. ``~/cdm-mapper/lib/mappings/icoads_r3000``
                  2. A specific mapping from generic data model to CDM, like map a SID-DCK from IMMA1's core and attachments
                     to CDM in a specific way. e.g. ``~/cdm-mapper/lib/mappings/icoads_r3000_d704``
   :type imodel: a data model that can be
   :param data: e.g. a pandas.Dataframe or io.parsers.TextFileReader objects or in-memory text streams (io.StringIO object).
   :type data: input data to map
   :param data_atts: dictionary with the {element_name:element_attributes} of the data. Type: string.
   :param cdm_subset: Defaults to the full set of CDM tables defined for the imodel. Type: list.
   :type cdm_subset: subset of CDM model tables to map.
   :param log_level: Defaults to ‘DEBUG’. Type: string.
   :type log_level: level of logging information to save.

   :returns: * **cdm_tables** (a python dictionary with the ``cdm_table_name`` and ``cdm_table_object`` pairs.)
             * **cdm_table_name** (is the name of the CDM table i.e. ``header``, ``observations_at``, etc.)
             * **cdm_table_object** (is the python dictionary with the ``{data:cdm_table_object, atts:cdm_table_atts}`` pairs.)
             * **1. cdm_table_object** (*is a python pandas DataFrame object with the CDM elements aligned in columns according*)
             * *to the order established by the imodel.*
             * **2. cdm_table_atts** (*python dictionary with the CDM element attributes. These element attributes can be the*)
             * *elements encoding, decimal places or other characteristics specified in the imodel.*


.. function:: map_model(imodel, data, data_atts, cdm_subset=None, log_level='INFO')

   Calls the main mapping function _map()

   :param imodel:
                  1. A generic mapping from a defined data model, like IMMA1’s core and attachments.
                  e.g. ``~/cdm-mapper/lib/mappings/icoads_r3000``

                  2. A specific mapping from generic data model to CDM, like map a SID-DCK from IMMA1’s core and attachments to
                  CDM in a specific way.
                      e.g. ``~/cdm-mapper/lib/mappings/icoads_r3000_d704``
   :type imodel: a data model that can be of several types.
   :param data: e.g. a ``pandas.Dataframe`` or ``io.parsers.TextFileReader`` objects or in-memory text streams
                (io.StringIO object).
   :type data: input data to map.
   :param data_atts: Type: string.
   :type data_atts: dictionary with the {element_name:element_attributes} of the data.
   :param cdm_subset: Defaults to the full set of CDM tables defined for the imodel. Type: list.
   :type cdm_subset: subset of CDM model tables to map.
   :param log_level: Defaults to ‘DEBUG’.
                     Type string.
   :type log_level: level of logging information to save.

   :returns: * *cdm_tables* -- a python dictionary with the ``{cdm_table_name: cdm_table_object}`` pairs.
             * *For more information look at the _map function.*


